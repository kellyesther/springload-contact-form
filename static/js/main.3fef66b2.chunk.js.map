{"version":3,"sources":["ColourList.tsx","AnimalList.tsx","ContactForm.tsx","reportWebVitals.ts","index.tsx"],"names":["colourList","value","label","animalList","ContactForm","classes","useStyles","colours","animals","useForm","register","handleSubmit","reset","errors","formState","useState","animal","setAnimal","colour","setColour","className","container","Card","variant","CardContent","cardContent","form","title","TextField","pattern","name","id","input","email","FormHelperText","errorMessage","password","select","onChange","event","target","helperText","map","option","MenuItem","Typography","style","color","SelectProps","multiple","includes","required","tigerType","type","Button","onClick","data","console","log","submitButton","makeStyles","backgroundColor","display","flexDirection","alignItems","justifyContent","minHeight","padding","alignSelf","width","margin","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fef66b2.chunk.js","sourcesContent":["export const colourList = [\r\n  {\r\n    value: \"blue\",\r\n    label: \"Blue\",\r\n  },\r\n  {\r\n    value: \"green\",\r\n    label: \"Green\",\r\n  },\r\n  {\r\n    value: \"red\",\r\n    label: \"Red\",\r\n  },\r\n  {\r\n    value: \"black\",\r\n    label: \"Black\",\r\n  },\r\n  {\r\n    value: \"brown\",\r\n    label: \"Brown\",\r\n  },\r\n];\r\n","export const animalList = [\r\n  {\r\n    value: \"bear\",\r\n    label: \"Bear\",\r\n  },\r\n  {\r\n    value: \"tiger\",\r\n    label: \"Tiger\",\r\n  },\r\n  {\r\n    value: \"snake\",\r\n    label: \"Snake\",\r\n  },\r\n  {\r\n    value: \"donkey\",\r\n    label: \"Donkey\",\r\n  },\r\n];\r\n","import {\n  Button,\n  FormHelperText,\n  MenuItem,\n  TextField,\n  Typography,\n  CardContent,\n  Card,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { colourList } from \"./ColourList\";\nimport { animalList } from \"./AnimalList\";\n\ninterface FormData {\n  email: string;\n  password: string;\n  colour: string;\n  animal: string[];\n  tigerType: string;\n}\n\nexport default function ContactForm() {\n  const classes = useStyles();\n  const colours = colourList;\n  const animals = animalList;\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<FormData>();\n\n  const [animal, setAnimal] = useState<string[]>([]);\n  const [colour, setColour] = useState(\"\");\n\n  const handleAnimalChange = (event: any) => {\n    setAnimal(event.target.value);\n  };\n\n  const handleColourChange = (event: any) => {\n    setColour(event.target.value);\n  };\n\n  const onSubmit = (data: FormData) => {\n    console.log(data);\n    reset();\n  };\n\n  return (\n    <div className={classes.container}>\n      <Card variant=\"outlined\">\n        <CardContent className={classes.cardContent}>\n          <form className={classes.form}>\n            <h1 className={classes.title}>Contact Form</h1>\n            <TextField\n              {...register(\"email\", {\n                pattern: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n              })}\n              name=\"email\"\n              id=\"standard-basic\"\n              label=\"Email\"\n              className={classes.input}\n              variant=\"outlined\"\n            />\n\n            {errors.email && (\n              <FormHelperText className={classes.errorMessage}>\n                \"Please enter a valid email\"\n              </FormHelperText>\n            )}\n            <TextField\n              {...register(\"password\", { pattern: /.{8,}/ })}\n              name=\"password\"\n              id=\"standard-basic\"\n              label=\"Password\"\n              className={classes.input}\n              variant=\"outlined\"\n            />\n\n            {errors.password && (\n              <FormHelperText className={classes.errorMessage}>\n                \"Password must be longer than 8 chars\"\n              </FormHelperText>\n            )}\n            <TextField\n              {...register(\"colour\")}\n              select\n              label=\"Colour\"\n              value={colour}\n              name=\"colour\"\n              onChange={handleColourChange}\n              helperText=\"Choose a colour\"\n              className={classes.input}\n              variant=\"outlined\"\n            >\n              {colours.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  <Typography style={{ color: option.value }}>\n                    {option.label}\n                  </Typography>\n                </MenuItem>\n              ))}\n            </TextField>\n\n            <TextField\n              variant=\"outlined\"\n              {...register(\"animal\")}\n              className={classes.input}\n              helperText=\"Choose one or more animals\"\n              label=\"Animal\"\n              name=\"animal\"\n              select\n              SelectProps={{\n                multiple: true,\n                value: animal,\n                onChange: handleAnimalChange,\n              }}\n            >\n              {animals.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n\n            {animal.includes(\"tiger\") ? (\n              <>\n                <TextField\n                  {...register(\"tigerType\", { required: true })}\n                  name=\"tigerType\"\n                  id=\"standard-basic\"\n                  label=\"Type of tiger\"\n                  className={classes.input}\n                  variant=\"outlined\"\n                  helperText=\"Enter the type of tiger\"\n                />\n                {errors.tigerType?.type === \"required\" && (\n                  <FormHelperText className={classes.errorMessage}>\n                    \"This is required\"\n                  </FormHelperText>\n                )}\n              </>\n            ) : (\n              <></>\n            )}\n\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={handleSubmit(onSubmit)}\n              className={classes.submitButton}\n            >\n              Submit\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles({\n  container: {\n    backgroundColor: \"lightblue\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n  },\n  cardContent: {\n    padding: 40,\n  },\n\n  title: {\n    alignSelf: \"center\",\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: 500,\n  },\n  input: {\n    margin: 5,\n  },\n  errorMessage: {\n    alignSelf: \"flex-end\",\n    color: \"red\",\n  },\n\n  submitButton: {\n    marginTop: 40,\n  },\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport ContactForm from \"./ContactForm\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContactForm />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}